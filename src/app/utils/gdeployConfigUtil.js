var ini = require('ini')

var helpers = {
    createGdeployConfig: function (glusterModel, templateModel, filePath) {
        var template = JSON.parse(JSON.stringify(templateModel));
        console.log(template)
        var volumeTemplate = template.volume
        let volumeConfigs = this.createVolumeConfigs(glusterModel.volumes, volumeTemplate)
        // We will keep everything in the template except hosts, volumes and brick configurations
        let gdeployConfig = this.mergeConfigWithTemplate(template, glusterModel.hosts, volumeConfigs)
        var configString = this.convertToString(gdeployConfig)
        this.writeConfigFile(filePath, configString)
        return configString
    },
    mergeConfigWithTemplate(template, hosts, volumeConfigs) {
        let gdeployConfig = {}
        for (var section in template) {
            if (template.hasOwnProperty(section)) {
                if (section === 'hosts') {
                    gdeployConfig['hosts'] = hosts
                } else if (section === 'volume') {
                    volumeConfigs.forEach(function (volumeConfig, index) {
                        gdeployConfig['volume' + (index + 1)] = volumeConfig
                    })
                }else if (section === 'yum2:host1') {
                    volumeConfigs.forEach(function (volumeConfig, index) {
                        gdeployConfig['yum2:' + hosts[0]] = template[section]
                    })
                } else {
                    gdeployConfig[section] = template[section]
                }
            }
        }
        return gdeployConfig
    },
    createVolumeConfigs(volumesList, volumeTemplate) {
        let volumeConfigs = []
        volumesList.map(function (volume) {
            let config = JSON.parse(JSON.stringify(volumeTemplate))
            config.volname = volume.name;
            config.brick_dirs = volume.brick_dir
            if (volume.type === "distribute") {
                config.replica = "no"
                delete config.replica_count
            } else if (volume.is_arbiter) {
                config.arbiter_count = 1
            }
            volumeConfigs.push(config)
        })

        return volumeConfigs

    },
    convertToString(config) {
        var configString = "#gdeploy configuration generated by cockpit-gluster plugin"
        //console.log(config)
        for (var section in config) {
            if (config.hasOwnProperty(section)) {
                configString = this.appendLine(configString, '[' + section + ']')
                if (config[section] && (typeof config[section] === "object") && (config[section] instanceof Array)) {
                    for (var i = 0; i < config[section].length; i++) {
                        configString = this.appendLine(configString, config[section][i])
                    }
                } else {
                    for (var key in config[section]) {
                        if (config[section].hasOwnProperty(key)) {
                            if (typeof config[section][key] === 'string' || config[section][key] instanceof String) {
                                configString = this.appendLine(configString, key + " = " + config[section][key])
                            } else if (typeof config[section][key] === 'boolean' && config[section][key]) {
                                //Simple values like [disktype]\nraid6 are converted into object with boolean value true like {disktype:{'raid6":true}}.
                                //We can ignore the value 'true' and just the key 'raid6' in the configuration.
                                configString = this.appendLine(configString, key)
                            }
                        }
                    }
                }
                configString = this.appendLine(configString,"")
            }
        }
        return configString
    },

    appendLine(baseString, newString) {
        return baseString + '\n' + newString
    },

    writeConfigFile: function (filePath, configString) {
        let file = cockpit.file(filePath)
        file.replace(configString)
            .done(function (tag) {
                file.close()
            })
            .fail(function (error) {
                file.close()
            });
    },
    readIniFile(filePath) {
        var that = this
        return cockpit.file(filePath).read()
    }

}
module.exports = helpers